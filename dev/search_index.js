var documenterSearchIndex = {"docs":
[{"location":"basics/DEsolution/#Differential-Equations-Solution","page":"Differential Equations Solution","title":"Differential Equations Solution","text":"","category":"section"},{"location":"basics/DEsolution/","page":"Differential Equations Solution","title":"Differential Equations Solution","text":"Differential Equations Solution uses DifferentialEquations.jl to solve the Problems. Build the problem and call generateDEcodes, work done!","category":"page"},{"location":"basics/DEsolution/","page":"Differential Equations Solution","title":"Differential Equations Solution","text":"generateDEcodes","category":"page"},{"location":"basics/DEsolution/#OptControl.generateDEcodes","page":"Differential Equations Solution","title":"OptControl.generateDEcodes","text":"generateDEcodes(L, F, state, u, tspan, t0, tf) -> Any\ngenerateDEcodes(L, F, state, u, tspan, t0, tf, Φ) -> Any\ngenerateDEcodes(\n    L,\n    F,\n    state,\n    u,\n    tspan,\n    t0,\n    tf,\n    Φ,\n    dt;\n    guess,\n    writeFilePath\n) -> Any\n\n\ngenerateDEcodes will generate the solution code that using DifferentialEquations.jl to solve problem\n\nA general form of optimal control problem:\n\nmin (Phi(boldsymbolx(t_f)t_f)+int_t_0^t_f \nLboldsymbolx(t)boldsymbolu(t)tdt) \nst hspace04cm dotboldsymbolx =fboldsymbolx(t)boldsymbolu(t)t\n\nargs:\n\nL: above L\n\nLboldsymbolx(t)boldsymbolu(t)t\n\nF: above f\n\nfboldsymbolx(t)boldsymbolu(t)t\n\nstate: states(variable) in F\nu: control variable u in F\ntspan: time field\nt0: initial value at tspan[1], length of t0 must be equal to length of state\ntf: final(end) value at tspan[2], length of tf must be equal to length of state\nΦ: above Φ, default: nothing\n\nPhi(boldsymbolx(t_f)t_f)\n\ndt: dt of BVProblem, default: 0.1\nguess: initial value of BVProblem, default: 1.0. length of guess must be equal to (2*length(state)+length(u))\nwriteFilePath: path of generated code, default: nothing\n\nExample:\n\nusing OptControl\n@variables t u x[1:2]\nf = [0 1; 0 0] * x + [0, 1] * u\nL = 0.5 * u^2\nt0 = [1.0, 1.0]\ntf = [0.0, 0.0]\ntspan = (0.0, 2.0)\nsol = generateDEcodes(L, f, x, u, tspan, t0, tf)\n\n\n\n\n\n","category":"function"},{"location":"basics/DEsolution/","page":"Differential Equations Solution","title":"Differential Equations Solution","text":"Overview of generateDEcodes and generateJuMPcodes","category":"page"},{"location":"basics/DEsolution/","page":"Differential Equations Solution","title":"Differential Equations Solution","text":"generateDEcodes and generateJuMPcodes using the same way to build problem, and they both can solve Fixed Value(Example1) and Free End(Example2). But generateDEcodes cannot deal with End constraint and Add variable limit. Meanwhile, generateDEcodeshave lower accuracy than generateJuMPcodes. Maybe accuracy can be improved by pass different solver parameters. You can have a try.","category":"page"},{"location":"basics/DEsolution/","page":"Differential Equations Solution","title":"Differential Equations Solution","text":"Example generateJuMPcodes generateDEcodes\n1. Fixed Value ✅ ✅\n2. Free Value ✅ ✅\n3. Constraint ✅ ❌\n4. Multiple x and u ✅ ✅\n5. variable limit ✅ ❌","category":"page"},{"location":"basics/DEsolution/","page":"Differential Equations Solution","title":"Differential Equations Solution","text":"✅ = supported","category":"page"},{"location":"basics/DEsolution/","page":"Differential Equations Solution","title":"Differential Equations Solution","text":"❌ = not supported","category":"page"},{"location":"basics/DEsolution/#Example-1:-Fixed-value","page":"Differential Equations Solution","title":"Example 1: Fixed value","text":"","category":"section"},{"location":"basics/DEsolution/","page":"Differential Equations Solution","title":"Differential Equations Solution","text":"To solve:","category":"page"},{"location":"basics/DEsolution/","page":"Differential Equations Solution","title":"Differential Equations Solution","text":"min int_0^2 u^2dt newline st  dotboldsymbolx =beginbmatrix01 newline 00endbmatrixboldsymbolx+ beginbmatrix0 newline 1 endbmatrixu newline boldsymbolx(0) = beginbmatrix 1 newline 1 endbmatrix boldsymbolx(2)=beginbmatrix 0 newline 0 endbmatrix","category":"page"},{"location":"basics/DEsolution/","page":"Differential Equations Solution","title":"Differential Equations Solution","text":"Just define variables and build functions. Call generateDEcodes and get the results.","category":"page"},{"location":"basics/DEsolution/","page":"Differential Equations Solution","title":"Differential Equations Solution","text":"The analytical solution of x_1 is","category":"page"},{"location":"basics/DEsolution/","page":"Differential Equations Solution","title":"Differential Equations Solution","text":"x_1(t) = 05*t^3-175*t^2+t+1","category":"page"},{"location":"basics/DEsolution/","page":"Differential Equations Solution","title":"Differential Equations Solution","text":"and we can campare the difference between them by using Mean Square Error(MSE).","category":"page"},{"location":"basics/DEsolution/","page":"Differential Equations Solution","title":"Differential Equations Solution","text":"using OptControl, Statistics, ModelingToolkit\n@variables t u x[1:2]\nf = [0 1; 0 0] * x + [0, 1] * u\nL = 0.5 * u^2\nt0 = [1.0, 1.0]\ntf = [0.0, 0.0]\ntspan = (0.0, 2.0)\nsol = generateDEcodes(L, f, x, u, tspan, t0, tf)\nnu = [sol.u[i][1] for i in 1:length(sol.u)]\nxs = collect(range(tspan[1], tspan[2], length=length(sol.u)))\nan = @.(0.5 * xs^3 - 1.75 * xs^2 + xs + 1)\nmean((an - nu).^2)","category":"page"},{"location":"basics/DEsolution/#Example-2:-Free-End","page":"Differential Equations Solution","title":"Example 2: Free End","text":"","category":"section"},{"location":"basics/DEsolution/","page":"Differential Equations Solution","title":"Differential Equations Solution","text":"To solve:","category":"page"},{"location":"basics/DEsolution/","page":"Differential Equations Solution","title":"Differential Equations Solution","text":"min int_0^2 u^2dt newline st  dotboldsymbolx =beginbmatrix01 newline 00endbmatrixboldsymbolx+ beginbmatrix0 newline 1 endbmatrixu newline boldsymbolx(0) = beginbmatrix 1 newline 1 endbmatrix boldsymbolx(1)=beginbmatrix 0 newline free endbmatrix","category":"page"},{"location":"basics/DEsolution/","page":"Differential Equations Solution","title":"Differential Equations Solution","text":"If variable is free, use nothing.","category":"page"},{"location":"basics/DEsolution/","page":"Differential Equations Solution","title":"Differential Equations Solution","text":"The analytical solution of x_1 is","category":"page"},{"location":"basics/DEsolution/","page":"Differential Equations Solution","title":"Differential Equations Solution","text":"x_1(t) = t^3-30*t^2+t+1","category":"page"},{"location":"basics/DEsolution/","page":"Differential Equations Solution","title":"Differential Equations Solution","text":"and get MSE.","category":"page"},{"location":"basics/DEsolution/","page":"Differential Equations Solution","title":"Differential Equations Solution","text":"using OptControl, Statistics, ModelingToolkit\n@variables t u x[1:2]\nf = [0 1; 0 0] * x + [0, 1] * u\nL = 0.5 * u^2\nt0 = [1.0, 1.0]\ntf = [0.0, nothing]\ntspan = (0.0, 1.0)\nN = 100\nsol = generateDEcodes(L, f, x, u, tspan, t0, tf)\nnu = [sol.u[i][1] for i in 1:length(sol.u)]\nxs = collect(range(tspan[1], tspan[2], length=length(sol.u)))\nan = @.(xs^3 - 3.0 * xs^2 + xs + 1)\nmean((an - nu).^2)","category":"page"},{"location":"basics/DEsolution/#Example-3:-Multiple-x-and-u","page":"Differential Equations Solution","title":"Example 3: Multiple x and u","text":"","category":"section"},{"location":"basics/DEsolution/","page":"Differential Equations Solution","title":"Differential Equations Solution","text":"To solve:","category":"page"},{"location":"basics/DEsolution/","page":"Differential Equations Solution","title":"Differential Equations Solution","text":"min int_0^2 u^2dt newline st  dotboldsymbolx =beginbmatrix01 newline 00endbmatrixboldsymbolx+ beginbmatrix10 newline 01 endbmatrixboldsymbolu newline boldsymbolx(0) = beginbmatrix 1 newline 1 endbmatrix boldsymbolx(2)=beginbmatrix 00 newline free endbmatrix\n","category":"page"},{"location":"basics/DEsolution/","page":"Differential Equations Solution","title":"Differential Equations Solution","text":"The analytical solution of u_1u_2 is","category":"page"},{"location":"basics/DEsolution/","page":"Differential Equations Solution","title":"Differential Equations Solution","text":"beginmatrix\nu_1=-frac914u_2=frac914*t-frac97\nendmatrix\n","category":"page"},{"location":"basics/DEsolution/","page":"Differential Equations Solution","title":"Differential Equations Solution","text":"and get MSE.","category":"page"},{"location":"basics/DEsolution/","page":"Differential Equations Solution","title":"Differential Equations Solution","text":"using OptControl, Statistics, ModelingToolkit\n@variables t u[1:2] x[1:2]\nf = [0 1; 0 0] * x + [1 0; 0 1] * u\nL = 0.5 * (u[1]^2 + u[2]^2)\nt0 = [1.0, 1.0]\ntf = [0.0, nothing]\ntspan = (0.0, 2.0)\nsol = generateDEcodes(L, f, x, u, tspan, t0, tf)\nnu1 = [sol.u[i][5] for i in 1:length(sol.u)]\nnu2 = [sol.u[i][6] for i in 1:length(sol.u)]\nxs = collect(range(tspan[1], tspan[2], length=length(sol.u)))\nan_u2 = @.(9 / 14 * xs - 9 / 7)\nres1 = mean((-9 / 14 .- nu1).^2)\nres2 = mean((an_u2 - nu2).^2)\n(res1,res2)","category":"page"},{"location":"basics/mtkSupport/#Build-State-Equations-with-ModelingToolkit.jl","page":"Build State Equations with ModelingToolkit.jl","title":"Build State Equations with ModelingToolkit.jl","text":"","category":"section"},{"location":"basics/mtkSupport/","page":"Build State Equations with ModelingToolkit.jl","title":"Build State Equations with ModelingToolkit.jl","text":"OptControl.jl support ODESystem from ModelingToolkit.jl. ModelingToolkit.jl is very powerful and using ModelingToolkit.jl is strongly recommended. generateMTKcodes is the same as generateJuMPcodes, but f is form of  ODESystem from ModelingToolkit.jl.","category":"page"},{"location":"basics/mtkSupport/","page":"Build State Equations with ModelingToolkit.jl","title":"Build State Equations with ModelingToolkit.jl","text":"generateMTKcodes","category":"page"},{"location":"basics/mtkSupport/#OptControl.generateMTKcodes","page":"Build State Equations with ModelingToolkit.jl","title":"OptControl.generateMTKcodes","text":"generateMTKcodes(\n    L,\n    F::ModelingToolkit.AbstractSystem,\n    state,\n    u,\n    tspan,\n    t0,\n    tf\n) -> Any\ngenerateMTKcodes(\n    L,\n    F::ModelingToolkit.AbstractSystem,\n    state,\n    u,\n    tspan,\n    t0,\n    tf,\n    Φ\n) -> Any\ngenerateMTKcodes(\n    L,\n    F::ModelingToolkit.AbstractSystem,\n    state,\n    u,\n    tspan,\n    t0,\n    tf,\n    Φ,\n    tf_constraint;\n    state_ub,\n    state_lb,\n    u_ub,\n    u_lb,\n    N,\n    discretization,\n    model_name,\n    writeFilePath,\n    tolerance\n) -> Any\n\n\ngenerateMTKcodes will transform odesystem to control problem and generate the solution code that using JuMP.jl to solve problem\n\nA general form of optimal control problem:\n\nmin (Phi(boldsymbolx(t_f)t_f)+int_t_0^t_f \nLboldsymbolx(t)boldsymbolu(t)tdt) \nst hspace04cm dotboldsymbolx =fboldsymbolx(t)boldsymbolu(t)t\n\nargs:\n\nL: above L, function of state and u.\n\nLboldsymbolx(t)boldsymbolu(t)t\n\nF: above f, in the form of ModelingToolkit.AbstractSystem, \n\nfboldsymbolx(t)boldsymbolu(t)t\n\nstate: states(variable) in F, from states of ModelingToolkit.ODESystem\nu: control variable u in F, from parameters of ModelingToolkit.ODESystem\ntspan: time field\nt0: initial value at tspan[1], length of t0 must be equal to length of state\ntf: final(end) value at tspan[2], length of tf must be equal to length of state\nΦ: above Φ, default: nothing\n\nPhi(boldsymbolx(t_f)t_f)\n\ntf_constraint: special requirements for end time, default: nothing. Example:\n\nx_1+x_2=0\n\nstate_ub: state's upper limit, length of state_ub must be equal to length of state, default: nothing\nstate_lb: state's lower limit, length of state_lb must be equal to length of state, default: nothing\nu_ub: u's upper limit, length of state_ub must be equal to length of u, default: nothing\nu_lb: u's lower limit, length of state_lb must be equal to length of u, default: nothing\nN: Number of discrete, default: 1000\n\ndt = (endTime - startTime)  N\n\ndiscretization: discretization methods, default: \"trapezoidal\"\nmodel_name: name of JuMP model, default: \"model\"\nwriteFilePath: path of generated code, default: nothing\ntolerance: acceptable_tol of Ipopt, default: 1.0e-6\n\nExample:\n\nusing OptControl,ModelingToolkit\n@parameters t\nps = @parameters σ = 1.0 ρ = 1.0 β = 1.0\nst = @variables x(t) y(t) z(t)\nD = Differential(t)\n\n# Define a differential equation\neqs = [D(x) ~ σ * (y - x),\n    D(y) ~ x * (ρ - z) - y,\n    D(z) ~ x * y - β * z]\n\n@named sys = ODESystem(eqs, t, st, ps)\n# toexpr(eqs)\nsys = structural_simplify(sys)\nL = 0.5 * (x^2 + y^2 + β^2)\nt0 = [1.0, 1.0, 1.0]\ntf = [0.0, 0.0, 0.0]\ntspan = (0.0, 2.0)\nN = 100\nsol = OptControl.generateMTKcodes(L, sys, states(sys), [β], tspan, t0, tf;\n    N=N, writeFilePath=\"test.jl\")\n\n\n\n\n\n","category":"function"},{"location":"basics/mtkSupport/#Example-1:-MTK-Equations","page":"Build State Equations with ModelingToolkit.jl","title":"Example 1: MTK Equations","text":"","category":"section"},{"location":"basics/mtkSupport/","page":"Build State Equations with ModelingToolkit.jl","title":"Build State Equations with ModelingToolkit.jl","text":"A example from ModelingToolkit.jl document,","category":"page"},{"location":"basics/mtkSupport/","page":"Build State Equations with ModelingToolkit.jl","title":"Build State Equations with ModelingToolkit.jl","text":"If we want to transform it to control problem, we treat σρβ as control variables and xyz as state variables( It's a math experiment, and it's meaningless in physics). We make xyz change as we want by σρβ with minimun cost 05 * (β^2 + σ^2 + ρ^2).","category":"page"},{"location":"basics/mtkSupport/","page":"Build State Equations with ModelingToolkit.jl","title":"Build State Equations with ModelingToolkit.jl","text":"Control xyz from 101010 to 000000 in 2 seconds.","category":"page"},{"location":"basics/mtkSupport/","page":"Build State Equations with ModelingToolkit.jl","title":"Build State Equations with ModelingToolkit.jl","text":"using OptControl,ModelingToolkit, Test\n@parameters t\nps = @parameters σ = 1.0 ρ = 1.0 β = 1.0\nst = ModelingToolkit.@variables x(t) y(t) z(t)\nD = Differential(t)\n\neqs = [D(x) ~ σ * (y - x),\n    D(y) ~ x * (ρ - z) - y,\n    D(z) ~ x * y - β * z]\n\n@named sys = ODESystem(eqs, t, st, ps)\n\nL = 0.5 * (β^2 + σ^2 + ρ^2)\nt0 = [1.0, 1.0, 1.0]\ntf = [0.0, 0.0, 0.0]\ntspan = (0.0, 2.0)\nN = 100\nsol = OptControl.generateMTKcodes(L, sys, states(sys), [σ, ρ, β], tspan, t0, tf;\n    N=N)\n\n@test isapprox.(0.0, sol[1][end, :], atol=1.0e-10) == [true, true, true]","category":"page"},{"location":"basics/mtkSupport/#Example-2:-RC-model","page":"Build State Equations with ModelingToolkit.jl","title":"Example 2: RC model","text":"","category":"section"},{"location":"basics/mtkSupport/","page":"Build State Equations with ModelingToolkit.jl","title":"Build State Equations with ModelingToolkit.jl","text":"This is Acausal Component-Based Modeling the RC Circuit from ModelingToolkit.jl document","category":"page"},{"location":"basics/mtkSupport/","page":"Build State Equations with ModelingToolkit.jl","title":"Build State Equations with ModelingToolkit.jl","text":"After defining components, solve the give the initial value and problem.","category":"page"},{"location":"basics/mtkSupport/","page":"Build State Equations with ModelingToolkit.jl","title":"Build State Equations with ModelingToolkit.jl","text":"sys = structural_simplify(rc_model)\nu0 = [\n      capacitor.v => 0.0\n     ]\nprob = ODAEProblem(sys, u0, (0, 10.0))\nsol = solve(prob, Tsit5())\nplot(sol)","category":"page"},{"location":"basics/mtkSupport/","page":"Build State Equations with ModelingToolkit.jl","title":"Build State Equations with ModelingToolkit.jl","text":"To be a control problem that make capacitor_+v change as we want by control variable source_+V, we assume parameter source_+V is changeable.","category":"page"},{"location":"basics/mtkSupport/","page":"Build State Equations with ModelingToolkit.jl","title":"Build State Equations with ModelingToolkit.jl","text":"using OptControl, ModelingToolkit, Test\n\n@variables t\n@connector function Pin(; name)\n    sts = @variables v(t) = 1.0 i(t) = 1.0 [connect = Flow]\n    ODESystem(Equation[], t, sts, []; name=name)\nend\n\nfunction Ground(; name)\n    @named g = Pin()\n    eqs = [g.v ~ 0]\n    compose(ODESystem(eqs, t, [], []; name=name), g)\nend\n\nfunction OnePort(; name)\n    @named p = Pin()\n    @named n = Pin()\n    sts = @variables v(t) = 1.0 i(t) = 1.0\n    eqs = [\n        v ~ p.v - n.v\n        0 ~ p.i + n.i\n        i ~ p.i\n    ]\n    compose(ODESystem(eqs, t, sts, []; name=name), p, n)\nend\n\nfunction Resistor(; name, R=1.0)\n    @named oneport = OnePort()\n    @unpack v, i = oneport\n    ps = @parameters R = R\n    eqs = [\n        v ~ i * R\n    ]\n    extend(ODESystem(eqs, t, [], ps; name=name), oneport)\nend\n\nfunction Capacitor(; name, C=1.0)\n    @named oneport = OnePort()\n    @unpack v, i = oneport\n    ps = @parameters C = C\n    D = Differential(t)\n    eqs = [\n        D(v) ~ i / C\n    ]\n    extend(ODESystem(eqs, t, [], ps; name=name), oneport)\nend\n\nfunction ConstantVoltage(; name, V=1.0)\n    @named oneport = OnePort()\n    @unpack v = oneport\n    ps = @parameters V = V\n    eqs = [\n        V ~ v\n    ]\n    extend(ODESystem(eqs, t, [], ps; name=name), oneport)\nend\n\nR = 1.0\nC = 1.0\nV = 1.0\n@named resistor = Resistor(R=R)\n@named capacitor = Capacitor(C=C)\n@named source = ConstantVoltage(V=V)\n@named ground = Ground()\n\nrc_eqs = [\n    connect(source.p, resistor.p)\n    connect(resistor.n, capacitor.p)\n    connect(capacitor.n, source.n)\n    connect(capacitor.n, ground.g)\n]\n\n@named _rc_model = ODESystem(rc_eqs, t)\n@named rc_model = compose(_rc_model,\n    [resistor, capacitor, source, ground])\n\nsys = structural_simplify(rc_model)\n\nL = 0.5 * (source.V^2)\nt0 = [1.0]\ntf = [3.0]\ntspan = (0.0, 1.0)\nN = 100\nsol = OptControl.generateMTKcodes(L, sys, states(sys), [source.V], tspan, t0, tf;N=N)\n\n@test isapprox.(3.0, sol[1][end, :], atol=1.0e-10) == [true]","category":"page"},{"location":"basics/mtkSupport/","page":"Build State Equations with ModelingToolkit.jl","title":"Build State Equations with ModelingToolkit.jl","text":"To solve the control problem, don't need to solve ODEs or DAEs but define some control arguments after structure simplied.","category":"page"},{"location":"basics/mtkSupport/","page":"Build State Equations with ModelingToolkit.jl","title":"Build State Equations with ModelingToolkit.jl","text":"In control problem, states are from state of ODESystem, and us are from parameters of ODESystem. States in ODESystem must be all passed to generateMTKcodes, and some of parameters can be used as control variables just like example above. You can use accessor functions states(sys) and parameters(sys) to see them.","category":"page"},{"location":"basics/OptimalControlInMath/#Solution-of-Math-Form","page":"Solution of Math Form","title":"Solution of Math Form","text":"","category":"section"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"Generally, optimal control problem is a functional extremum problem. Sometimes analytic solution is hard to get, so numerical methods are feasible. To be solved, it can be treated as a optimization problem and differential equations problem. Therefore, JuMP.jl and DifferentialEqutions.jl are two powerful solver.","category":"page"},{"location":"basics/OptimalControlInMath/#General-Form","page":"Solution of Math Form","title":"General Form","text":"","category":"section"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"General form of optimal control problems are:","category":"page"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"min int_t_0^t_f Lboldsymbolx(t)boldsymbolu(t)tdt st hspace04cm dotboldsymbolx =\nfboldsymbolx(t)boldsymbolu(t)t","category":"page"},{"location":"basics/OptimalControlInMath/#Differential-form-Solution","page":"Solution of Math Form","title":"Differential form Solution","text":"","category":"section"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"Define Hamilton function boldsymbolH and Lagrange multiplier vector boldsymbollambda,","category":"page"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"Hboldsymbolx(t)boldsymbolu(t)t = Lboldsymbolx(t)boldsymbolu(t)t + boldsymbollambda^T(t)fboldsymbolx(t)boldsymbolu(t)t\nboldsymbollambda(t) = lambda_1(t)lambda_2(t)lambda_n(t)","category":"page"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"Necessary conditions for the existence of functional extremum are:","category":"page"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"Adjoint Equation:","category":"page"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"dotboldsymbollambda =- fracpartial Hpartial boldsymbolx ","category":"page"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"Coupling Equation:","category":"page"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"fracpartial Hpartial boldsymbolu  = 0","category":"page"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"State Equation","category":"page"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"dotboldsymbolx = -fracpartial Hpartial boldsymbollambda =fboldsymbolx(t)boldsymbolu(t)t","category":"page"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"There are several different possibilities for Transversality conditions:","category":"page"},{"location":"basics/OptimalControlInMath/#Condition-1:-Fixed-initial-and-final-value","page":"Solution of Math Form","title":"Condition 1: Fixed initial and final value","text":"","category":"section"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"Fixed initial and final value means:","category":"page"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"boldsymbolx(t_0)=boldsymbolx_0boldsymbolx(t_f)=boldsymbolx_f","category":"page"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"Complete equations to be solved are:","category":"page"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"leftbeginmatrix\n dotboldsymbollambda =- fracpartial Hpartial boldsymbolx \n fracpartial Hpartial boldsymbolu  = 0\n dotboldsymbolx =fboldsymbolx(t)boldsymbolu(t)t \n boldsymbolx(t_0)=boldsymbolx_0boldsymbolx(t_f)=boldsymbolx_f\nendmatrixright","category":"page"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"For example:","category":"page"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"min int_0^2 u^2dt \nst hspace04cm dotboldsymbolx =\nbeginbmatrix 01  00 endbmatrixboldsymbolx +beginbmatrix01endbmatrixu \nboldsymbolx(0)=beginbmatrix11endbmatrixboldsymbolx(2)=beginbmatrix00endbmatrix","category":"page"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"Equations to be solved are:","category":"page"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"leftbeginmatrix\n dotlambda_1 = 0\n dotlambda_2  = -lambda_1\n dotx_1 = x_2 \n dotx_2 = u \n u + lambda_2 = 0\nendmatrixright","category":"page"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"Boundary conditions are:","category":"page"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"x_1(0)=1x_2(0)=1x_1(2)=0x_2(2)=0","category":"page"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"This is a typical Differential Algebraic Equations(DAE) with Boundary Value Problems(BVP). DifferentialEqutions.jl is a powerful solver to solve this problem.","category":"page"},{"location":"basics/OptimalControlInMath/#Condition-2:-Fixed-initial-value-and-Free-final-value","page":"Solution of Math Form","title":"Condition 2: Fixed initial value and Free final value","text":"","category":"section"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"In this condition, consider Bolza Type:","category":"page"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"min (Phi(boldsymbolx(t_f)t_f)+int_t_0^t_f Lboldsymbolx(t)boldsymbolu(t)tdt)","category":"page"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"the Phi(boldsymbolx(t_f)t_f) are some special requirements for end time.","category":"page"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"Complete equations to be solved are:","category":"page"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"leftbeginmatrix\n dotboldsymbollambda =- fracpartial Hpartial boldsymbolx \n fracpartial Hpartial boldsymbolu  = 0\n dotboldsymbolx =fboldsymbolx(t)boldsymbolu(t)t \n boldsymbolx(t_0)=boldsymbolx_0boldsymbollambda(t_f)=fracpartial boldsymbolPhipartial boldsymbolx_t=t_f\nendmatrixright","category":"page"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"For example:","category":"page"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"min int_0^2 u^2dt \nst hspace04cm dotboldsymbolx =\nbeginbmatrix 01  00 endbmatrixboldsymbolx +beginbmatrix01endbmatrixu \nboldsymbolx(0)=beginbmatrix11endbmatrixboldsymbolx(2)=beginbmatrix0freeendbmatrix","category":"page"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"Equations to be solved are:","category":"page"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"leftbeginmatrix\n dotlambda_1 = 0\n dotlambda_2  = -lambda_1\n dotx_1 = x_2 \n dotx_2 = u \n u + lambda_2 = 0\nendmatrixright","category":"page"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"Boundary conditions are:","category":"page"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"x_1(0)=1x_2(0)=1x_1(2)=0lambda_2(2)=fracpartial Phipartial x_2(1)=0","category":"page"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"This is also a DAE with BVP.","category":"page"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"There still some other conditions which DifferentialEquations can't apply to, but JuMP can solve them with a Optimization form.","category":"page"},{"location":"basics/OptimalControlInMath/#Optimization-form","page":"Solution of Math Form","title":"Optimization form","text":"","category":"section"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"Essentially, Optimal Control Problem is a optimization problem.Optimization methods can solve it by discretizing the continuous function.  ","category":"page"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"From","category":"page"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"min int_t_0^t_f Lboldsymbolx(t)boldsymbolu(t)tdt st hspace04cm dotboldsymbolx =\nfboldsymbolx(t)boldsymbolu(t)t","category":"page"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"to","category":"page"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"min sum_i=1^n L(boldsymbolx_iboldsymbolu_it_i) st hspace04cm boldsymbolx_i+1 =boldsymbolx_i+f(boldsymbolx_iboldsymbolu_it_i)*dt","category":"page"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"Actually, discretization method above is Euler method or we can use Backward Euler method:","category":"page"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"min sum_i=1^n L(boldsymbolx_iboldsymbolu_it_i) st hspace04cm boldsymbolx_i+1 =boldsymbolx_i+f(boldsymbolx_i+1boldsymbolu_i+1t_i+1)*dt","category":"page"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"There are still lots of discretization methods we can choose like Trapezoidal Method, Simpson Method, Adams method and so on.","category":"page"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"For example in Condition 1, we can get:","category":"page"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"min sum_i=1^100 u_i^2dt \nst hspace04cm boldsymbolx_i+1 = boldsymbolx_i + \n(beginbmatrix 01  00 endbmatrixboldsymbolx_i +beginbmatrix01endbmatrixu_i) * 002 \nboldsymbolx_1=beginbmatrix11endbmatrixboldsymbolx_100=beginbmatrix00endbmatrix","category":"page"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"With the Optimization form, Condition 3 can be solved.","category":"page"},{"location":"basics/OptimalControlInMath/#Condition-3:-Fixed-initial-value-and-final-value-with-constrain","page":"Solution of Math Form","title":"Condition 3: Fixed initial value and final value with constrain","text":"","category":"section"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"min int_0^2 u^2dt \nst hspace04cm dotboldsymbolx =\nbeginbmatrix 01  00 endbmatrixboldsymbolx +beginbmatrix01endbmatrixu \nboldsymbolx(0)=beginbmatrix11endbmatrix\nx_1(2)+x_2(2) =0","category":"page"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"With the Optimization form, we just add a different constraint:","category":"page"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"min sum_i=1^100 u_i^2dt \nst hspace04cm boldsymbolx_i+1 = boldsymbolx_i + \n(beginbmatrix 01  00 endbmatrixboldsymbolx_i +beginbmatrix01endbmatrixu_i) * 002 \nboldsymbolx_1=beginbmatrix11endbmatrix\nx_1100+x_2100=0","category":"page"},{"location":"basics/OptimalControlInMath/","page":"Solution of Math Form","title":"Solution of Math Form","text":"Awesome!","category":"page"},{"location":"basics/JuMPsolution/#Linear-Optimization-Solution","page":"Linear Optimization Solution","title":"Linear Optimization Solution","text":"","category":"section"},{"location":"basics/JuMPsolution/","page":"Linear Optimization Solution","title":"Linear Optimization Solution","text":"Linear Optimization solution uses JuMP.jl to solve the Problems. Build the problem and call generateJuMPcodes, work done!","category":"page"},{"location":"basics/JuMPsolution/","page":"Linear Optimization Solution","title":"Linear Optimization Solution","text":"generateJuMPcodes","category":"page"},{"location":"basics/JuMPsolution/#OptControl.generateJuMPcodes","page":"Linear Optimization Solution","title":"OptControl.generateJuMPcodes","text":"generateJuMPcodes(L, F, state, u, tspan, t0, tf) -> Any\ngenerateJuMPcodes(L, F, state, u, tspan, t0, tf, Φ) -> Any\ngenerateJuMPcodes(\n    L,\n    F,\n    state,\n    u,\n    tspan,\n    t0,\n    tf,\n    Φ,\n    tf_constraint;\n    state_ub,\n    state_lb,\n    u_ub,\n    u_lb,\n    N,\n    discretization,\n    model_name,\n    writeFilePath,\n    tolerance\n) -> Any\n\n\ngenerateJuMPcodes will generate the solution code that using JuMP.jl to solve problem\n\nA general form of optimal control problem:\n\nmin (Phi(boldsymbolx(t_f)t_f)+int_t_0^t_f \nLboldsymbolx(t)boldsymbolu(t)tdt) \nst hspace04cm dotboldsymbolx =fboldsymbolx(t)boldsymbolu(t)t\n\nargs:\n\nL: above L\n\nLboldsymbolx(t)boldsymbolu(t)t\n\nF: above f\n\nfboldsymbolx(t)boldsymbolu(t)t\n\nstate: states(variable) in F\nu: control variable u in F\ntspan: time field\nt0: initial value at tspan[1], length of t0 must be equal to length of state\ntf: final(end) value at tspan[2], length of tf must be equal to length of state\nΦ: above Φ, default: nothing\n\nPhi(boldsymbolx(t_f)t_f)\n\ntf_constraint: special requirements for end time, default: nothing. Example:\n\nx_1+x_2=0\n\nstate_ub: state's upper limit, length of state_ub must be equal to length of state, default: nothing\nstate_lb: state's lower limit, length of state_lb must be equal to length of state, default: nothing\nu_ub: u's upper limit, length of u_ub must be equal to length of u, default: nothing\nu_lb: u's lower limit, length of u_lb must be equal to length of u, default: nothing\nN: Number of discrete, default: 1000\n\ndt = (endTime - startTime)  N\n\ndiscretization: discretization methods, default: \"trapezoidal\"\nmodel_name: name of JuMP model, default: \"model\"\nwriteFilePath: path of generated code, default: nothing\ntolerance: acceptable_tol of Ipopt, default: 1.0e-6\n\nExample:\n\nusing OptControl\n@variables t u x[1:2]\nf = [0 1; 0 0] * x + [0, 1] * u\nL = 0.5 * u^2\nt0 = [1.0, 1.0]\ntf = [0.0, 0.0]\ntspan = (0.0, 2.0)\nN = 100\nsol = generateJuMPcodes(L, f, x, u, tspan, t0, tf; N=N)\n\n\n\n\n\n","category":"function"},{"location":"basics/JuMPsolution/","page":"Linear Optimization Solution","title":"Linear Optimization Solution","text":"Let's see some examples. If you are not familar with ModelingToolkit.jl, you can see the Symbolics.jl  document (which ModelingToolkit.jl based on) and try some tests about symbolic computation","category":"page"},{"location":"basics/JuMPsolution/","page":"Linear Optimization Solution","title":"Linear Optimization Solution","text":"using OptControl,ModelingToolkit\n@variables x[1:2] y[1:2]\nprint(scalarize(rand(1:10,2,2)*x+rand(1:10,2,2)*y))","category":"page"},{"location":"basics/JuMPsolution/","page":"Linear Optimization Solution","title":"Linear Optimization Solution","text":"PS: scalarize is from Symbolics.jl","category":"page"},{"location":"basics/JuMPsolution/","page":"Linear Optimization Solution","title":"Linear Optimization Solution","text":"If you need, pass a name to  writeFilePath  and do some changes in script.","category":"page"},{"location":"basics/JuMPsolution/#Example-1:-Fixed-value","page":"Linear Optimization Solution","title":"Example 1: Fixed value","text":"","category":"section"},{"location":"basics/JuMPsolution/","page":"Linear Optimization Solution","title":"Linear Optimization Solution","text":"To solve:","category":"page"},{"location":"basics/JuMPsolution/","page":"Linear Optimization Solution","title":"Linear Optimization Solution","text":"min int_0^2 u^2dt newline st  dotboldsymbolx =beginbmatrix01 newline 00endbmatrixboldsymbolx+ beginbmatrix0 newline 1 endbmatrixu newline boldsymbolx(0) = beginbmatrix 1 newline 1 endbmatrix boldsymbolx(2)=beginbmatrix 0 newline 0 endbmatrix","category":"page"},{"location":"basics/JuMPsolution/","page":"Linear Optimization Solution","title":"Linear Optimization Solution","text":"Just define variables and build functions. Call generateJuMPcodes and get the results.","category":"page"},{"location":"basics/JuMPsolution/","page":"Linear Optimization Solution","title":"Linear Optimization Solution","text":"The analytical solution of x_1 is","category":"page"},{"location":"basics/JuMPsolution/","page":"Linear Optimization Solution","title":"Linear Optimization Solution","text":"x_1(t) = 05*t^3-175*t^2+t+1","category":"page"},{"location":"basics/JuMPsolution/","page":"Linear Optimization Solution","title":"Linear Optimization Solution","text":"and we can campare the difference between them by using Mean Square Error(MSE).","category":"page"},{"location":"basics/JuMPsolution/","page":"Linear Optimization Solution","title":"Linear Optimization Solution","text":"using OptControl, Statistics, ModelingToolkit\n@variables t u x[1:2]\nf = [0 1; 0 0] * x + [0, 1] * u\nL = 0.5 * u^2\nt0 = [1.0, 1.0]\ntf = [0.0, 0.0]\ntspan = (0.0, 2.0)\nN = 100\nsol = generateJuMPcodes(L, f, x, u, tspan, t0, tf; N=N)\nxs = collect(range(tspan[1], tspan[2], length=N))\nan = @.(0.5 * xs^3 - 1.75 * xs^2 + xs + 1)\nmean((an - sol[1][:, 1]).^2)","category":"page"},{"location":"basics/JuMPsolution/#Example-2:-Free-End","page":"Linear Optimization Solution","title":"Example 2: Free End","text":"","category":"section"},{"location":"basics/JuMPsolution/","page":"Linear Optimization Solution","title":"Linear Optimization Solution","text":"To solve:","category":"page"},{"location":"basics/JuMPsolution/","page":"Linear Optimization Solution","title":"Linear Optimization Solution","text":"min int_0^2 u^2dt newline st  dotboldsymbolx =beginbmatrix01 newline 00endbmatrixboldsymbolx+ beginbmatrix0 newline 1 endbmatrixu newline boldsymbolx(0) = beginbmatrix 1 newline 1 endbmatrix boldsymbolx(1)=beginbmatrix 0 newline free endbmatrix","category":"page"},{"location":"basics/JuMPsolution/","page":"Linear Optimization Solution","title":"Linear Optimization Solution","text":"If variable is free, use nothing.","category":"page"},{"location":"basics/JuMPsolution/","page":"Linear Optimization Solution","title":"Linear Optimization Solution","text":"The analytical solution of x_1 is","category":"page"},{"location":"basics/JuMPsolution/","page":"Linear Optimization Solution","title":"Linear Optimization Solution","text":"x_1(t) = t^3-30*t^2+t+1","category":"page"},{"location":"basics/JuMPsolution/","page":"Linear Optimization Solution","title":"Linear Optimization Solution","text":"and get MSE.","category":"page"},{"location":"basics/JuMPsolution/","page":"Linear Optimization Solution","title":"Linear Optimization Solution","text":"using OptControl, Statistics, ModelingToolkit, ModelingToolkit\n@variables t u x[1:2]\nf = [0 1; 0 0] * x + [0, 1] * u\nL = 0.5 * u^2\nt0 = [1.0, 1.0]\ntf = [0.0, nothing]\ntspan = (0.0, 1.0)\nN = 100\nsol = generateJuMPcodes(L, f, x, u, tspan, t0, tf; N=N)\nxs = collect(range(tspan[1], tspan[2], length=N))\nan = @.(xs^3 - 3.0 * xs^2 + xs + 1)\nmean((an - sol[1][:, 1]).^2)","category":"page"},{"location":"basics/JuMPsolution/#Example-3:-End-Constraint","page":"Linear Optimization Solution","title":"Example 3: End Constraint","text":"","category":"section"},{"location":"basics/JuMPsolution/","page":"Linear Optimization Solution","title":"Linear Optimization Solution","text":"To solve:","category":"page"},{"location":"basics/JuMPsolution/","page":"Linear Optimization Solution","title":"Linear Optimization Solution","text":"min int_0^2 u^2dt newline st  dotboldsymbolx =beginbmatrix01 newline 00endbmatrixboldsymbolx+ beginbmatrix0 newline 1 endbmatrixu newline boldsymbolx(0) = beginbmatrix 1 newline 1 endbmatrix boldsymbolx(1)=beginbmatrix free newline free endbmatrix  x_1(1)+x_2(1)=0","category":"page"},{"location":"basics/JuMPsolution/","page":"Linear Optimization Solution","title":"Linear Optimization Solution","text":"Passing special end constraint to parameter tf_constraint.","category":"page"},{"location":"basics/JuMPsolution/","page":"Linear Optimization Solution","title":"Linear Optimization Solution","text":"The analytical solution of x_1 is","category":"page"},{"location":"basics/JuMPsolution/","page":"Linear Optimization Solution","title":"Linear Optimization Solution","text":"x_1(t) = -114*t^2*(t - 6)","category":"page"},{"location":"basics/JuMPsolution/","page":"Linear Optimization Solution","title":"Linear Optimization Solution","text":"and get MSE.","category":"page"},{"location":"basics/JuMPsolution/","page":"Linear Optimization Solution","title":"Linear Optimization Solution","text":"using OptControl, Statistics, ModelingToolkit\n@variables t u x[1:2]\nf = [0 1; 0 0] * x + [0, 1] * u\nL = 0.5 * u^2\nt0 = [0.0, 0.0]\ntf = [nothing, nothing]\ntspan = (0.0, 1.0)\ntf_con = x[1] + x[2] - 1.0\nN = 100\nsol = generateJuMPcodes(L, f, x, u, tspan, t0, tf, nothing, tf_con; N=N)\nxs = collect(range(tspan[1], tspan[2], length=N))\nan = @.(-1 / 14 * xs^2 * (xs - 6))\nmean((an - sol[1][:, 1]).^2)","category":"page"},{"location":"basics/JuMPsolution/","page":"Linear Optimization Solution","title":"Linear Optimization Solution","text":"PS:x[1] + x[2] - 1.0 above is x_1+x_2-10. There nothing to do with independent variable t, because tf_constraint means constraint at the end time.","category":"page"},{"location":"basics/JuMPsolution/#Example-4:-Multiple-End-Constraint","page":"Linear Optimization Solution","title":"Example 4: Multiple End Constraint","text":"","category":"section"},{"location":"basics/JuMPsolution/","page":"Linear Optimization Solution","title":"Linear Optimization Solution","text":"To solve:","category":"page"},{"location":"basics/JuMPsolution/","page":"Linear Optimization Solution","title":"Linear Optimization Solution","text":"min int_0^2 u^2dt newline st  dotboldsymbolx =beginbmatrix01 newline 00endbmatrixboldsymbolx+ beginbmatrix0 newline 1 endbmatrixu newline boldsymbolx(0) = beginbmatrix 1 newline 1 endbmatrix boldsymbolx(2)=beginbmatrix free newline free endbmatrix  x_1(2)+x_2(2)=0 x_1(2)-x_2(2)=0\n","category":"page"},{"location":"basics/JuMPsolution/","page":"Linear Optimization Solution","title":"Linear Optimization Solution","text":"Actually, solution of those two constraint equations are x_1=0x_2=0Essentially, it's the same as Example 1.","category":"page"},{"location":"basics/JuMPsolution/","page":"Linear Optimization Solution","title":"Linear Optimization Solution","text":"The analytical solution of x_1 is","category":"page"},{"location":"basics/JuMPsolution/","page":"Linear Optimization Solution","title":"Linear Optimization Solution","text":"x_1(t) = 05*t^3-175*t^2+t+1","category":"page"},{"location":"basics/JuMPsolution/","page":"Linear Optimization Solution","title":"Linear Optimization Solution","text":"and get MSE.","category":"page"},{"location":"basics/JuMPsolution/","page":"Linear Optimization Solution","title":"Linear Optimization Solution","text":"using OptControl, Statistics, ModelingToolkit\n@variables t u x[1:2]\nf = [0 1; 0 0] * x + [0, 1] * u\nL = 0.5 * u^2\nt0 = [1.0, 1.0]\ntf = [nothing, nothing]\ntspan = (0.0, 2.0)\ntf_con = [x[1] + x[2], x[1] - x[2]]\nN = 100\nsol = generateJuMPcodes(L, f, x, u, tspan, t0, tf, nothing, tf_con; N=N)\nxs = collect(range(tspan[1], tspan[2], length=N))\nan = @.(0.5 * xs^3 - 1.75 * xs^2 + xs + 1)\nmean((an - sol[1][:, 1]).^2)","category":"page"},{"location":"basics/JuMPsolution/#Example-5:-Multiple-x-and-u","page":"Linear Optimization Solution","title":"Example 5: Multiple x and u","text":"","category":"section"},{"location":"basics/JuMPsolution/","page":"Linear Optimization Solution","title":"Linear Optimization Solution","text":"To solve:","category":"page"},{"location":"basics/JuMPsolution/","page":"Linear Optimization Solution","title":"Linear Optimization Solution","text":"min int_0^2 u^2dt newline st  dotboldsymbolx =beginbmatrix01 newline 00endbmatrixboldsymbolx+ beginbmatrix10 newline 01 endbmatrixboldsymbolu newline boldsymbolx(0) = beginbmatrix 1 newline 1 endbmatrix boldsymbolx(2)=beginbmatrix 00 newline free endbmatrix\n","category":"page"},{"location":"basics/JuMPsolution/","page":"Linear Optimization Solution","title":"Linear Optimization Solution","text":"The analytical solution of u_1u_2 is","category":"page"},{"location":"basics/JuMPsolution/","page":"Linear Optimization Solution","title":"Linear Optimization Solution","text":"beginmatrix\nu_1=-frac914u_2=frac914*t-frac97\nendmatrix\n","category":"page"},{"location":"basics/JuMPsolution/","page":"Linear Optimization Solution","title":"Linear Optimization Solution","text":"and get MSE.","category":"page"},{"location":"basics/JuMPsolution/","page":"Linear Optimization Solution","title":"Linear Optimization Solution","text":"using OptControl, Statistics, ModelingToolkit\n@variables t u[1:2] x[1:2]\nf = [0 1; 0 0] * x + [1 0; 0 1] * u\nL = 0.5 * (u[1]^2 + u[2]^2)\nt0 = [1.0, 1.0]\ntf = [0.0, nothing]\ntspan = (0.0, 2.0)\nN = 100\nsol = generateJuMPcodes(L, f, x, u, tspan, t0, tf; N=N)\nxs = collect(range(tspan[1], tspan[2], length=N))\nan_u2 = @.(9 / 14 * xs - 9 / 7)\nres1 = mean((-9 / 14 .- sol[2][:, 1]).^2)\nres2 = mean((an_u2 - sol[2][:, 2]).^2)\n(res1,res2)","category":"page"},{"location":"basics/JuMPsolution/#Example-6:-Add-variable-limit","page":"Linear Optimization Solution","title":"Example 6: Add variable limit","text":"","category":"section"},{"location":"basics/JuMPsolution/","page":"Linear Optimization Solution","title":"Linear Optimization Solution","text":"To solve:","category":"page"},{"location":"basics/JuMPsolution/","page":"Linear Optimization Solution","title":"Linear Optimization Solution","text":"min x_2(1) newline st  dotboldsymbolx =beginbmatrix-10 newline 10endbmatrixboldsymbolx+ beginbmatrix1 newline 0 endbmatrixu newline boldsymbolx(0) = beginbmatrix 1 newline 1 endbmatrix boldsymbolx(1)=beginbmatrix free newline free endbmatrix  -10\nleqslantboldsymboluleqslant10","category":"page"},{"location":"basics/JuMPsolution/","page":"Linear Optimization Solution","title":"Linear Optimization Solution","text":"The analytical solution of x_1 is","category":"page"},{"location":"basics/JuMPsolution/","page":"Linear Optimization Solution","title":"Linear Optimization Solution","text":"x_1(t) = 2*e^-t - 1","category":"page"},{"location":"basics/JuMPsolution/","page":"Linear Optimization Solution","title":"Linear Optimization Solution","text":"and get MSE.","category":"page"},{"location":"basics/JuMPsolution/","page":"Linear Optimization Solution","title":"Linear Optimization Solution","text":"using OptControl, Statistics, ModelingToolkit\n@variables t u x[1:2]\nf = [-1 0; 1 0] * x + [1, 0] * u\nL = 0\nt0 = [1.0, 0.0]\ntf = [nothing, nothing]\ntspan = (0.0, 1.0)\nN = 100\nΦ = x[2]\nuub = [1.0]\nulb = [-1.0]\nsol = generateJuMPcodes(L, f, x, u, tspan, t0, tf, Φ, nothing;N=N, u_ub=uub, u_lb=ulb)\nxs = collect(range(tspan[1], tspan[2], length=N))\nan = @.(2 * exp(-xs) - 1)\nmean((an - sol[1][:, 1]).^2)","category":"page"},{"location":"basics/JuMPsolution/","page":"Linear Optimization Solution","title":"Linear Optimization Solution","text":"In this example, give L a value 0. Because L has nothing to do with optimization objective.  ","category":"page"},{"location":"basics/discretization/#Discretization-Methods","page":"Discretization Methods","title":"Discretization Methods","text":"","category":"section"},{"location":"basics/discretization/","page":"Discretization Methods","title":"Discretization Methods","text":"For generateJuMPcodes, choose different discretization methods by passing name of method to discretization","category":"page"},{"location":"basics/discretization/#Single-step-Method-Supported","page":"Discretization Methods","title":"Single-step Method Supported","text":"","category":"section"},{"location":"basics/discretization/","page":"Discretization Methods","title":"Discretization Methods","text":"f_i = f(x_iy_i)","category":"page"},{"location":"basics/discretization/","page":"Discretization Methods","title":"Discretization Methods","text":"trapezoidal","category":"page"},{"location":"basics/discretization/","page":"Discretization Methods","title":"Discretization Methods","text":"y_i+i=y_i+frach2f_i+f_i+1\nRy=-frach^312y^(3)(xi_i)","category":"page"},{"location":"basics/discretization/","page":"Discretization Methods","title":"Discretization Methods","text":"Amdams-Bashforth\nAmdams-Monlton","category":"page"},{"location":"#OptControl","page":"Home","title":"OptControl","text":"","category":"section"},{"location":"#What-is-OptControl.jl?","page":"Home","title":"What is OptControl.jl?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"OptControl.jl is a interface that use symbols to build optimal control problem based on Symbolics.jl, and then transforms optimal control problem to:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Differential Equations Problems(DEP)\nOptimzation Problems(OP)","category":"page"},{"location":"","page":"Home","title":"Home","text":"DEP can be solved by DifferentialEquations.jl and OP can be solved by JuMP.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"Features of OptControl.jl:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Symbolics.jl makes problem building very easy and user-friendly\nScript generation provides a template of JuMP.jl solution code or DifferentialEquations.jl solution code, and you can design your code based on template.\nGet results directly if you want.","category":"page"},{"location":"#Citation","page":"Home","title":"Citation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you use OptControl in your work, please cite the this paper:","category":"page"},{"location":"","page":"Home","title":"Home","text":"@article{yang2022optcontrol,\n  title={OptControl.jl: An Interpreter for Optimal Control Problem},\n  author={Jingyi Yang, Yuebao Yang, Mingtao Li},\n  journal={arXiv preprint arXiv:2207.13229},\n  year={2022},\n  primaryClass={math.OC}\n}","category":"page"},{"location":"#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"#Install","page":"Home","title":"Install","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"OptControl\")","category":"page"},{"location":"#Solve-Problem","page":"Home","title":"Solve Problem","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To solve optimal control problem:","category":"page"},{"location":"","page":"Home","title":"Home","text":"min int_0^2 u^2dt st hspace04cm dotboldsymbolx =beginbmatrix01 00endbmatrixboldsymbolx+ beginbmatrix01endbmatrixuboldsymbolx(0)=beginbmatrix11endbmatrixboldsymbolx(2)=beginbmatrix00endbmatrix","category":"page"},{"location":"","page":"Home","title":"Home","text":"Copy and run:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Symbolics,OptControl\n@variables t u x[1:2]\nf = [0 1; 0 0] * x + [0, 1] * u\nL = 0.5 * u^2\nt0 = [1.0, 1.0]\ntf = [0.0, 0.0]\ntspan = (0.0, 2.0)\nN = 100\nsol = generateJuMPcodes(L, f, x, u, tspan, t0, tf; N=N, \nwriteFilePath=\"JuMPscript.jl\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"In Current folder, you will see","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentFolder/\n└──JuMPscript.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"And you will see contents of JuMPscript.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"begin\n    using Pkg\n    pkgNeeds = [\"JuMP\", \"Ipopt\", \"Symbolics\"]\n    alreadyGet = keys(Pkg.project().dependencies)\n    toAdd = [package for package in pkgNeeds if package ∉ alreadyGet]\n    isempty(toAdd) ? nothing : Pkg.add(toAdd)\nend\nusing Symbolics,Ipopt,JuMP\n\n#============Function Parts================#\ndiscretization_trapezoidal = function (yi, h, index, args...)\n    return yi + h / 2 * (args[1] + args[2])\nend\nL_objectiveFunc = function (ˍ₋arg1,)\n    #= C:\\Users\\DELL\\.julia\\packages\\SymbolicUtils\\v2ZkM\\src\\code.jl:349 =#\n    #= C:\\Users\\DELL\\.julia\\packages\\SymbolicUtils\\v2ZkM\\src\\code.jl:350 =#\n    #= C:\\Users\\DELL\\.julia\\packages\\SymbolicUtils\\v2ZkM\\src\\code.jl:351 =#\n    begin\n        (*)(0.5, (^)(ˍ₋arg1[3], 2))\n    end\nend\nF_statesFunc = function (ˍ₋arg1,)\n    #= C:\\Users\\DELL\\.julia\\packages\\SymbolicUtils\\v2ZkM\\src\\code.jl:349 =#\n    #= C:\\Users\\DELL\\.julia\\packages\\SymbolicUtils\\v2ZkM\\src\\code.jl:350 =#\n    #= C:\\Users\\DELL\\.julia\\packages\\SymbolicUtils\\v2ZkM\\src\\code.jl:351 =#\n    begin\n        begin\n            #= C:\\Users\\DELL\\.julia\\packages\\SymbolicUtils\\v2ZkM\\src\\code.jl:444 =#\n            (SymbolicUtils.Code.create_array)(typeof(ˍ₋arg1), nothing, Val{1}(), Val{(2,)}(), (getindex)(ˍ₋arg1, 2), ˍ₋arg1[3])\n        end\n    end\nend\n\n\n\n#========== define model =============#\nmodel = Model(Ipopt.Optimizer)\nset_optimizer_attribute(model, \"print_level\", 0)\n\n#========== define variables =============#\nJuMP.@variable(model,  x[1:100, j=1:2] )\nJuMP.@variable(model,  u[1:100, j=1:1] )\n\n#========== boundary constraint =============#\nJuMP.@NLconstraint(model, [j = 1:2],x[1, j] == [1.0, 1.0][j])\nJuMP.@NLconstraint(model, \n    [j = [i for i in 1:2 if !isequal([0.0, 0.0][i],nothing)]],\n     x[end, j] == [0.0, 0.0][j])\n\n\n#========== state constraint =============#\nJuMP.@NLconstraint(model, [i = 1:99, j = 1:2],\n        x[i+1,j] == discretization_trapezoidal(x[i,:], 0.02, i, \n\tF_statesFunc(append!([],x[i+1,:],u[i+1,:])),\n\tF_statesFunc(append!([],x[i+0,:],u[i+0,:])),\n\t)[j])\n\n#========== objective =============#\n_sum_ = [L_objectiveFunc(append!([],x[i,:],u[i,:])) for i in 1:100]\nJuMP.@NLobjective(model, Min, sum(_sum_[i] for i in 1:100))\n\n#================ solve ==================#\nJuMP.optimize!(model)\n(x,u) = (JuMP.value.(x)[:,:],JuMP.value.(u)[:,:])\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"Actually, OptControl.jl just run the generated script automatically. If you are familiar with JuMP.jl or DifferentialEquations.jl and want to do more things, just give writeFilePath a value(name of Julia script).","category":"page"},{"location":"#Solution-Handle","page":"Home","title":"Solution Handle","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you don't know JuMP.jl or DifferentialEquations.jl. Don't worry, just run and get the results. Do what you want with the results.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Get state:","category":"page"},{"location":"","page":"Home","title":"Home","text":"x = sol[1]","category":"page"},{"location":"","page":"Home","title":"Home","text":"100×2 Matrix{Float64}:\n 1.0           1.0\n 1.01947       0.946775\n 1.0377        0.876642\n 1.05455       0.807758\n 1.07002       0.740124\n 1.08416       0.673739\n 1.09699       0.608604\n 1.10852       0.544719\n 1.11879       0.482083\n 1.12782       0.420697\n 1.13563       0.36056\n 1.14225       0.301673\n 1.14771       0.244036\n 1.15202       0.187648\n 1.15523       0.13251\n 1.15734       0.0786212\n 1.15838       0.0259822\n 1.15839      -0.0254071\n 1.15738      -0.0755468\n ⋮\n 0.13861      -0.715141\n 0.124606     -0.685306\n 0.11121      -0.654221\n 0.0984493    -0.621886\n 0.0863474    -0.588302\n 0.0749297    -0.553469\n 0.0642211    -0.517386\n 0.0542468    -0.480053\n 0.0450315    -0.44147\n 0.0366004    -0.401638\n 0.0289785    -0.360557\n 0.0221907    -0.318226\n 0.0162619    -0.274645\n 0.0112174    -0.229814\n 0.00708187   -0.183734\n 0.00388048   -0.136405\n 0.00163818   -0.0878253\n 0.000379965  -0.0379965\n 0.0           0.0","category":"page"},{"location":"","page":"Home","title":"Home","text":"Get u:","category":"page"},{"location":"","page":"Home","title":"Home","text":"u = sol[2]","category":"page"},{"location":"","page":"Home","title":"Home","text":"100×1 Matrix{Float64}:\n -1.7845763373682157\n -3.537912486353386\n -3.475432109587295\n -3.412951732821204\n -3.3504713560551127\n -3.2879909792890216\n -3.22551060252293\n -3.163030225756839\n -3.1005498489907475\n -3.038069472224657\n -2.975589095458566\n -2.913108718692475\n -2.850628341926384\n -2.788147965160293\n -2.725667588394202\n -2.663187211628111\n -2.6007068348620197\n -2.5382264580959286\n -2.4757460813298375\n  ⋮\n  1.4605176549338985\n  1.5229980316999896\n  1.5854784084660805\n  1.6479587852321715\n  1.7104391619982624\n  1.7729195387643535\n  1.8353999155304446\n  1.8978802922965357\n  1.9603606690626267\n  2.022841045828718\n  2.085321422594809\n  2.1478017993609\n  2.210282176126991\n  2.272762552893082\n  2.3352429296591732\n  2.3977233064252643\n  2.4602036831913554\n  2.5226840599574465\n  1.276962124170246","category":"page"},{"location":"basics/NLJuMPsolution/#Nonlinear-Optimization-Solution","page":"Nonlinear Optimization Solution","title":"Nonlinear Optimization Solution","text":"","category":"section"},{"location":"basics/NLJuMPsolution/","page":"Nonlinear Optimization Solution","title":"Nonlinear Optimization Solution","text":"Nonlinear Optimization solution uses generateNLJuMPcodes to solve the Problems. The arguments are the same as generateJuMPcodes","category":"page"},{"location":"basics/NLJuMPsolution/","page":"Nonlinear Optimization Solution","title":"Nonlinear Optimization Solution","text":"generateNLJuMPcodes","category":"page"},{"location":"basics/NLJuMPsolution/#OptControl.generateNLJuMPcodes","page":"Nonlinear Optimization Solution","title":"OptControl.generateNLJuMPcodes","text":"generateNLJuMPcodes(L, F, state, u, tspan, t0, tf) -> Any\ngenerateNLJuMPcodes(L, F, state, u, tspan, t0, tf, Φ) -> Any\ngenerateNLJuMPcodes(\n    L,\n    F,\n    state,\n    u,\n    tspan,\n    t0,\n    tf,\n    Φ,\n    tf_constraint;\n    state_ub,\n    state_lb,\n    u_ub,\n    u_lb,\n    N,\n    discretization,\n    model_name,\n    writeFilePath,\n    tolerance\n) -> Any\n\n\ngenerateNLJuMPcodes is used to solve Nonlinear control problem\n\nA general form of optimal control problem:\n\nmin (Phi(boldsymbolx(t_f)t_f)+int_t_0^t_f \nLboldsymbolx(t)boldsymbolu(t)tdt) \nst hspace04cm dotboldsymbolx =fboldsymbolx(t)boldsymbolu(t)t\n\nargs:\n\nL: above L\n\nLboldsymbolx(t)boldsymbolu(t)t\n\nF: above f\n\nfboldsymbolx(t)boldsymbolu(t)t\n\nstate: states(variable) in F\nu: control variable u in F\ntspan: time field\nt0: initial value at tspan[1], length of t0 must be equal to length of state\ntf: final(end) value at tspan[2], length of tf must be equal to length of state\nΦ: above Φ, default: nothing\n\nPhi(boldsymbolx(t_f)t_f)\n\ntf_constraint: special requirements for end time, default: nothing. Example:\n\nx_1+x_2=0\n\nstate_ub: state's upper limit, length of state_ub must be equal to length of state, default: nothing\nstate_lb: state's lower limit, length of state_lb must be equal to length of state, default: nothing\nu_ub: u's upper limit, length of u_ub must be equal to length of u, default: nothing\nu_lb: u's lower limit, length of u_lb must be equal to length of u, default: nothing\nN: Number of discrete, default: 1000\n\ndt = (endTime - startTime)  N\n\ndiscretization: discretization methods, default: \"trapezoidal\"\nmodel_name: name of JuMP model, default: \"model\"\nwriteFilePath: path of generated code, default: nothing\ntolerance: acceptable_tol of Ipopt, default: 1.0e-6\n\nExample:\n\nusing OptControl,ModelingToolkit\n@variables t u x\nf = exp(x) + u\nL = 0.5 * u^2\nt0 = [1.0]\ntf = [0.0]\ntspan = (0.0, 2.0)\nN = 100\nsol = generateNLJuMPcodes(L, f, x, u, tspan, t0, tf; N=N)\n\n\n\n\n\n","category":"function"},{"location":"basics/NLJuMPsolution/","page":"Nonlinear Optimization Solution","title":"Nonlinear Optimization Solution","text":"Let's see some examples. If you are not familar with ModelingToolkit.jl, you can see the Symbolics.jl  document (which ModelingToolkit.jl based on) and try some tests about symbolic computation","category":"page"},{"location":"basics/NLJuMPsolution/","page":"Nonlinear Optimization Solution","title":"Nonlinear Optimization Solution","text":"using OptControl,ModelingToolkit\n@variables x[1:2] y[1:2]\nprint(scalarize(rand(1:10,2,2)*x+rand(1:10,2,2)*y))","category":"page"},{"location":"basics/NLJuMPsolution/","page":"Nonlinear Optimization Solution","title":"Nonlinear Optimization Solution","text":"PS: scalarize is from Symbolics.jl","category":"page"},{"location":"basics/NLJuMPsolution/","page":"Nonlinear Optimization Solution","title":"Nonlinear Optimization Solution","text":"If you need, pass a name to  writeFilePath  and do some changes in script.","category":"page"},{"location":"basics/NLJuMPsolution/#Example-1","page":"Nonlinear Optimization Solution","title":"Example 1","text":"","category":"section"},{"location":"basics/NLJuMPsolution/","page":"Nonlinear Optimization Solution","title":"Nonlinear Optimization Solution","text":"To solve:","category":"page"},{"location":"basics/NLJuMPsolution/","page":"Nonlinear Optimization Solution","title":"Nonlinear Optimization Solution","text":"min int_0^2 u^2dt newline st  dotx =e^x+ u newline x(0) = 1 x(2)=0","category":"page"},{"location":"basics/NLJuMPsolution/","page":"Nonlinear Optimization Solution","title":"Nonlinear Optimization Solution","text":"Just define variables and build functions. Call generateNLJuMPcodes and get the results.","category":"page"},{"location":"basics/NLJuMPsolution/","page":"Nonlinear Optimization Solution","title":"Nonlinear Optimization Solution","text":"using OptControl, ModelingToolkit, Test\n@variables t u x\nf = exp(x) + u\nL = u^2\nt0 = [1.0]\ntf = [0.0]\ntspan = (0.0, 2.0)\nN = 100\nsol = generateNLJuMPcodes(L, f, x, u, tspan, t0, tf; N=N)\n\n@test isapprox.(0.0, sol[1][end, :], atol=1.0e-5) == [true for i in 1:length(sol[1][end, :])]\n","category":"page"},{"location":"basics/NLJuMPsolution/#Example-2","page":"Nonlinear Optimization Solution","title":"Example 2","text":"","category":"section"},{"location":"basics/NLJuMPsolution/","page":"Nonlinear Optimization Solution","title":"Nonlinear Optimization Solution","text":"To solve:","category":"page"},{"location":"basics/NLJuMPsolution/","page":"Nonlinear Optimization Solution","title":"Nonlinear Optimization Solution","text":"min int_0^2 u^2dt newline st  dotboldsymbolx =beginbmatrixexpcos newline sin1endbmatrixboldsymbolx+ beginbmatrix0 newline 1 endbmatrixu newline boldsymbolx(0) = beginbmatrix 1 newline 1 endbmatrix boldsymbolx(1)=beginbmatrix 0 newline 0 endbmatrix","category":"page"},{"location":"basics/NLJuMPsolution/","page":"Nonlinear Optimization Solution","title":"Nonlinear Optimization Solution","text":"using OptControl, ModelingToolkit, Test\n@variables t u x[1:2]\nf = [exp(x[1]) + cos(x[2]), sin(x[1]) + x[2]] + [1, 0] * u\nL = u^2\nt0 = [1.0, 1.0]\ntf = [0.0, 0.0]\ntspan = (0.0, 2.0)\nN = 100\nsol = generateNLJuMPcodes(L, f, x, u, tspan, t0, tf; N=N)\n@test isapprox.(0.0, sol[1][end, :], atol=1.0e-5) == [true for i in 1:length(sol[1][end, :])]","category":"page"}]
}
